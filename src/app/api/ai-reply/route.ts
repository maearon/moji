import { NextResponse } from "next/server";

interface HistoryMessage {
  content: string;
  is_ai?: boolean;
  users?: {
    email: string;
    id: string;
    name: string;
  } | null;
}

interface AiReplyResponse {
  text: string;
  lang: "vi" | "en";
}

export async function POST(req: Request) {
  try {
    const { message, history }: { message: string; history?: HistoryMessage[] } =
      await req.json();

    // üëâ Check API key
    if (!process.env.GEMINI_API_KEY) {
      return NextResponse.json(
        { text: "Server ch∆∞a c·∫•u h√¨nh GEMINI_API_KEY.", lang: "vi" },
        { status: 500 }
      );
    }

    // üëâ Detect language (simple heuristic)
    const isVietnamese = /[ƒÉ√¢ƒë√™√¥∆°∆∞·∫°·∫£·∫•·∫ß·∫©·∫´·∫≠·∫Ø·∫±·∫≥·∫µ·∫∑·∫π·∫ª·∫Ω·ªÅ·ªÅ·ªÉ·ªÖ·ªá·ªâ·ªã·ªç·ªè·ªë·ªì·ªï·ªó·ªô·ªõ·ªù·ªü·ª°·ª£·ª•·ªß·ª©·ª´·ª≠·ªØ·ª±·ª≥·ªµ·ª∑·ªπ]/i.test(
      message
    );
    const lang: "vi" | "en" = isVietnamese ? "vi" : "en";

    // üëâ Build conversation context (limit last 20 messages)
    const limitedHistory = (history || []).slice(-20);

    const historyText = limitedHistory
      .map((m) => {
        const role = m.is_ai
          ? "Bot"
          : m.users?.email?.includes("admin")
          ? "Admin"
          : "User";
        return `${role}: ${m.content}`;
      })
      .join("\n");

    // üëâ Prompt with adidas ecommerce role
    const prompt = `
B·∫°n l√† m·ªôt chatbot h·ªó tr·ª£ kh√°ch h√†ng ch√≠nh th·ª©c c·ªßa trang adidas ecommerce.
Nhi·ªám v·ª•: tr·∫£ l·ªùi c√°c c√¢u h·ªèi c·ªßa kh√°ch h√†ng v·ªÅ s·∫£n ph·∫©m, ƒë∆°n h√†ng, thanh to√°n, v·∫≠n chuy·ªÉn v√† ƒë·ªïi tr·∫£,
trong tr∆∞·ªùng h·ª£p admin ch√≠nh ch∆∞a tr·ª±c tuy·∫øn.

Y√™u c·∫ßu:
- Lu√¥n tr·∫£ l·ªùi b·∫±ng ${lang === "vi" ? "Ti·∫øng Vi·ªát" : "Ti·∫øng Anh"}.
- Ng·∫Øn g·ªçn (t·ªëi ƒëa 2 c√¢u, ~15 t·ª´).
- Gi·ªØ gi·ªçng ƒëi·ªáu chuy√™n nghi·ªáp, th√¢n thi·ªán.
- N·∫øu c√¢u h·ªèi v∆∞·ª£t ngo√†i ph·∫°m vi (kh√¥ng li√™n quan ƒë·∫øn adidas ecommerce), h√£y l·ªãch s·ª± r·∫±ng kh√¥ng li√™n quan v√† b·ªè qua r·ªìi tr·∫£ l·ªùi ti·∫øp trong ph·∫°m vi adidas ecommerce c≈©ng nh∆∞ hi·ªÉu bi·∫øt c·ªßa b·∫°n v·ªÅ c√¢u h·ªèi.

L·ªãch s·ª≠ h·ªôi tho·∫°i:
${historyText}

Kh√°ch h√†ng: ${message}
Bot:
    `.trim();

    const geminiRes = await fetch(
      "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-goog-api-key": process.env.GEMINI_API_KEY,
        },
        body: JSON.stringify({
          contents: [{ parts: [{ text: prompt }] }],
        }),
      }
    ).then((r) => r.json());

    const aiText: string =
      (
        geminiRes?.candidates?.[0]?.content?.parts?.[0]?.text ||
        (lang === "vi"
          ? "Xin l·ªói, bot ch∆∞a hi·ªÉu c√¢u h·ªèi."
          : "Sorry, I didn't understand the question.")
      ).trim();

    const response: AiReplyResponse = { text: aiText, lang };

    return NextResponse.json(response);
  } catch (error) {
    console.error("AI reply error:", error);
    const fallback: AiReplyResponse = {
      text: "C√≥ l·ªói x·∫£y ra khi g·ªçi AI.",
      lang: "vi",
    };
    return NextResponse.json(fallback, { status: 500 });
  }
}
